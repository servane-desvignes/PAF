//classe des proies


abstract class Prey extends Boid{



  float alpha = 5*PI/6; //caractérise le champs de vision de la proies
  float desiredSeparationPrey = 25.0f; // separation d'une autre proie
  float desiredSeparationPredator = 2000.0f;
  boolean isTargeted=false;
  boolean isIsolated=false;
  

  Prey(float x,float y,float r,float maxforce, float maxspeed, float rangeVision, float rangeAudition){
    super(x,y,r,  maxforce, maxspeed, rangeVision, rangeAudition);
  }
  
  @Override
  boolean isPrey(){


    return true;
  } 
  
  
  boolean canBeSeen(Boid b){
    PVector P = new PVector(b.x,b.y);
    PVector delta=PVector.sub(P,this.position);
    float dist = delta.mag();
    if(dist>this.rangeVision){
      return false;
    }
    float beta = abs(PVector.angleBetween(this.velocity,delta));
    float gamma = PI-alpha;
    if(beta>PI-gamma){
      return false;
    }
    return true;
  }
  
  boolean canBeHeard(Boid b){
     PVector P = new PVector(b.x,b.y);
    PVector delta=PVector.sub(P,this.position);
    float dist = delta.mag();
    if(dist>this.rangeAudition){
      return false;
    }
    return true;
  }
  
  int numberOfNeighboors(){
    ArrayList<Prey> preys = savana.getPreys();
    preys.remove(this);
    int i = 0;
    for(Prey p : preys){
      if(this.distTo(p)<10*this.r){
        i++;
      }
    }
    return i;}
    
    
    
      
      
    
    
  
  
  void behavior(ArrayList<Boid> boids) {
    PVector sep = separate(boids);   // Separation
    PVector ali = align(boids);      // Alignment
    PVector coh = cohesion(boids); // Cohesion
    
    
    if(this.numberOfNeighboors()<3){
      this.isIsolated = true;
    }
    if(this.numberOfNeighboors()>2){
    this.isIsolated = false;
  }
    // Arbitrarily weight these forces
    sep.mult(0.5);
    ali.mult(0.5);
    coh.mult(0.3);
    // Add the force vectors to acceleration
    applyForce(sep);
    applyForce(ali);
    applyForce(coh);
  }
   // Alignment
  // For every nearby boid in the system, calculate the average velocity
  @Override
  PVector align (ArrayList<Boid> boids) {
    float neighbordist = rangeVision;
    PVector sum = new PVector(0, 0);
    int count = 0;
    for (Boid other : boids) {
      float d = PVector.dist(position, other.position);
      if ((d > 0) && (d < neighbordist)) {
        sum.add(other.velocity);
        count++;
      }
    }
    if (count > 0) {
      sum.div((float)count);
      // First two lines of code below could be condensed with new PVector setMag() method
      // Not using this method until Processing.js catches up
      // sum.setMag(maxspeed);

      // Implement Reynolds: Steering = Desired - Velocity
      sum.normalize();
      sum.mult(maxspeed);
      PVector steer = PVector.sub(sum, velocity);
      steer.limit(maxforce);
      return steer;
    } 
    else {
      return new PVector(0, 0);
    }
  }

  // Cohesion
  // For the average position (i.e. center) of all nearby boids, calculate steering vector towards that position
  @Override
  PVector cohesion (ArrayList<Boid> boids) {
    float neighbordist = rangeVision;
    PVector sum = new PVector(0, 0);   // Start with empty vector to accumulate all positions
    int count = 0;
    for (Boid other : boids) {
      float d = PVector.dist(position, other.position);
      if ((d > 0) && (d < neighbordist)) {
        sum.add(other.position); // Add position
        count++;
      }
    }
    if (count > 0) {
      sum.div(count);
      return seek(sum);  // Steer towards the position
    } 
    else {
      return new PVector(0, 0);
    }
  }
  
  @Override
  PVector separate (ArrayList<Boid> boids) {
    float desiredseparation = 25.0f;
    PVector steer = new PVector(0, 0, 0);
    int count = 0;
    
    // For every boid in the system, check if it's too close 
    // on change la distance de séparation selon que c'est une proie ou un predateur
    
    for (Boid other : boids) {
      
      if(other.isPrey()){
        desiredseparation=desiredSeparationPrey;
      }
      
      if(other.isPredator()){
        desiredseparation=desiredSeparationPredator;
      }
      
      float d = PVector.dist(position, other.position);
      // If the distance is greater than 0 and less than an arbitrary amount (0 when you are yourself)
      if ((d > 0) && (d < desiredseparation)) {
        // Calculate vector pointing away from neighbor
        PVector diff = PVector.sub(position, other.position);
        diff.normalize();
        diff.div(d);        // Weight by distance
        steer.add(diff);
        count++;            // Keep track of how many
      }
    }
    // Average -- divide by how many
    if (count > 0) {
      steer.div((float)count);
    }

    // As long as the vector is greater than 0
    if (steer.mag() > 0) {
      // First two lines of code below could be condensed with new PVector setMag() method
      // Not using this method until Processing.js catches up
      // steer.setMag(maxspeed);

      // Implement Reynolds: Steering = Desired - Velocity
      steer.normalize();
      steer.mult(maxspeed);
      steer.sub(velocity);
      steer.limit(maxforce);
    }
    return steer;
  }

  
}
